#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socketio-thing:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Add socket.io server on the same port
 * It would be nice to separate this into a separate file
 */
const io = require('socket.io')(server, {path: '/mousetracker/socket.io'});
let sequenceNumberByClient = new Map();
var cursorPositionsSaved = {};

io.on('connection', socket => {
  console.info(`Client connected [id=${socket.id}]`);
  socket.emit('welcome', { message: 'Welcome!', id: socket.id, cursorPositionsSaved: cursorPositionsSaved });
  console.log(cursorPositionsSaved);
  socket.broadcast.emit('broadcast', { message: 'Joined', id: socket.id });

  //Initialize this client's sequence number
  sequenceNumberByClient.set(socket, 1);

  //When socket disconnects, remove it from the list:
  socket.on("disconnect", () => {
    sequenceNumberByClient.delete(socket);
    console.info(`Client gone [id=${socket.id}]`);
  });

  //On mousemove, broadcast a mousemove event to everyone
  socket.on('mousemove', (data) => {
    console.info('mousemove');
    console.info(data);
    let mousemove_data = data;
    mousemove_data.id = socket.id;
    io.emit('mousemove', data);
    cursorPositionsSaved[socket.id] = data;
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
